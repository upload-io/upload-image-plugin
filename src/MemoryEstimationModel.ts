import { MemoryEstimationModelParameters } from "upload-image-plugin/types/MemoryEstimationModelParameters";
import { OutputImageFormat } from "upload-image-plugin/types/OutputImageFormat";

/**
 * See README.md.
 */
export class MemoryEstimationModel {
  /**
   * Generated by MemoryEstimationModelTrainer.
   */
  private static readonly modelParameters = {
    jpg: { spaceCoefficient: 0.0207, spaceConstant: 9000, shareCoefficient: 0.055, shareConstant: 534211 },
    jp2: { spaceCoefficient: 0.0348, spaceConstant: 9000, shareCoefficient: 0, shareConstant: 0 }
  };

  private static readonly modelParametersPartial: Partial<Record<OutputImageFormat, MemoryEstimationModelParameters>> =
    MemoryEstimationModel.modelParameters;

  /**
   * Use one of the more expensive formats, so we overestimate.
   */
  private static readonly defaultModelParameters = MemoryEstimationModel.modelParameters.jp2;

  /**
   * Function must never underestimate, as this will case OOMs. Overestimations are undesirable in the sense that they
   * result in wasted resources, and extra cost (GB-seconds) for the user.
   */
  static getEstimateInKBForFormat(
    inputPixelCount: number,
    outputPixelCount: number,
    format: OutputImageFormat
  ): number {
    return MemoryEstimationModel.getEstimateInKB(
      inputPixelCount,
      outputPixelCount,
      MemoryEstimationModel.modelParametersPartial[format] ?? MemoryEstimationModel.defaultModelParameters
    );
  }

  static getEstimateInKB(
    inputPixelCount: number,
    outputPixelCount: number,
    modelParameters: MemoryEstimationModelParameters
  ): number {
    const { spaceCoefficient, spaceConstant, shareCoefficient, shareConstant } = modelParameters;
    const largeImage = Math.max(inputPixelCount, outputPixelCount);
    const smallImage = Math.min(inputPixelCount, outputPixelCount);
    const spaceRequiredForPixelsKB = (pixelCount: number): number => spaceCoefficient * pixelCount + spaceConstant;
    const pixelsReusedBetweenImages = shareCoefficient * largeImage + shareConstant;
    const spaceRequiredForSmallImageKB = Math.max(0, spaceRequiredForPixelsKB(smallImage - pixelsReusedBetweenImages));
    const spaceRequiredForLargeImageKB = spaceRequiredForPixelsKB(largeImage);
    return Math.ceil(spaceRequiredForLargeImageKB + spaceRequiredForSmallImageKB);
  }
}
