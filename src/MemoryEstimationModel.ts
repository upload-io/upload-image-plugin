import { MemoryEstimationModelParameters } from "upload-image-plugin/types/MemoryEstimationModelParameters";

/**
 * See README.md.
 */
export class MemoryEstimationModel {
  /**
   * Generated by MemoryEstimationModelTrainer.
   */
  private static readonly modelParameters: MemoryEstimationModelParameters = {
    spaceCoefficient: 0.0309,
    spaceConstant: 20000,
    shareCoefficient: 0.74,
    shareConstant: 1500000
  };

  /**
   * Function must never underestimate, as this will case OOMs. Overestimations are undesirable in the sense that they
   * result in wasted resources, and extra cost (GB-seconds) for the user.
   */
  static getEstimateInKB(
    inputPixelCount: number,
    outputPixelCount: number,
    modelParameters: MemoryEstimationModelParameters = MemoryEstimationModel.modelParameters
  ): number {
    const { spaceCoefficient, spaceConstant, shareCoefficient, shareConstant } = modelParameters;
    const largeImage = Math.max(inputPixelCount, outputPixelCount);
    const smallImage = Math.min(inputPixelCount, outputPixelCount);
    const spaceRequiredForPixelsKB = (pixelCount: number): number => spaceCoefficient * pixelCount + spaceConstant;
    const pixelsReusedBetweenImages = shareCoefficient * largeImage + shareConstant;
    const spaceRequiredForSmallImageKB = Math.max(0, spaceRequiredForPixelsKB(smallImage - pixelsReusedBetweenImages));
    const spaceRequiredForLargeImageKB = spaceRequiredForPixelsKB(largeImage);
    return Math.ceil(spaceRequiredForLargeImageKB + spaceRequiredForSmallImageKB);
  }
}
